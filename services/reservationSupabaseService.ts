import { supabase } from '../config/supabase';
import { Reservation, ReservationStatut, NouvelleReservation } from '../models/Reservation';
import { annonceSupabaseService } from './annonceSupabaseService';

// Convertir un objet Supabase en Reservation
const convertReservationData = (data: any): Reservation => {
  return {
    id: data.id,
    annonceId: data.annonce_id,
    benevoleId: data.benevole_id,
    benevoleName: data.benevole_name,
    benevoleEmail: data.benevole_email,
    dateReservation: new Date(data.created_at),
    statut: data.statut,
    message: data.message,
    commentaireAssociation: data.commentaire_association
  };
};

/**
 * Service de gestion des r√©servations avec Supabase
 */
export const reservationSupabaseService = {

  /**
   * Cr√©er une nouvelle r√©servation
   */
  createReservation: async (reservation: NouvelleReservation): Promise<string> => {
    try {
      console.log('üéØ [RESERVATION] Cr√©ation r√©servation:', reservation);
      
      const newReservation = {
        annonce_id: reservation.annonceId,
        benevole_id: reservation.benevoleId,
        benevole_name: reservation.benevoleName || 'B√©n√©vole',
        benevole_email: reservation.benevoleEmail || '',
        message: reservation.message || 'Nouvelle r√©servation',
        statut: ReservationStatut.EnAttente,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      const { data, error } = await supabase
        .from('reservations')
        .insert(newReservation)
        .select()
        .single();
      
      if (error) {
        throw error;
      }
      
      console.log('‚úÖ [RESERVATION] Cr√©√©e avec succ√®s, ID:', data.id);
      return data.id;
    } catch (error) {
      console.error("‚ùå [RESERVATION] Erreur cr√©ation:", error);
      throw new Error(`Impossible de cr√©er la r√©servation: ${error}`);
    }
  },

  /**
   * R√©cup√©rer les r√©servations d'un utilisateur
   */
  getReservationsByUser: async (userId: string): Promise<Reservation[]> => {
    try {
      console.log('üìã [RESERVATION] R√©cup√©ration pour utilisateur:', userId);

      if (!userId) {
        console.log("‚ùå [RESERVATION] Pas d'ID utilisateur");
        return [];
      }
      
      const { data, error } = await supabase
        .from('reservations')
        .select('*')
        .eq('benevole_id', userId)
        .order('created_at', { ascending: false });
      
      if (error) {
        throw error;
      }

      console.log(`üìã [RESERVATION] ${data?.length || 0} documents trouv√©s`);

      const reservations: Reservation[] = [];
      
      if (data) {
        data.forEach(item => {
          try {
            const reservation = convertReservationData(item);
            reservations.push(reservation);
            console.log(`‚úÖ [RESERVATION] Ajout√©e: ${item.id}`);
          } catch (error) {
            console.error(`‚ùå [RESERVATION] Erreur conversion ${item.id}:`, error);
          }
        });
      }

      console.log(`‚úÖ [RESERVATION] ${reservations.length} r√©servations r√©cup√©r√©es`);
      return reservations;
    } catch (error) {
      console.error("‚ùå [RESERVATION] Erreur r√©cup√©ration:", error);
      return [];
    }
  },

  /**
   * R√©cup√©rer une r√©servation par ID
   */
  getReservationById: async (id: string): Promise<Reservation | null> => {
    try {
      const { data, error } = await supabase
        .from('reservations')
        .select('*')
        .eq('id', id)
        .single();
      
      if (error) {
        if (error.code === 'PGRST116') {
          // Aucun enregistrement trouv√©
          return null;
        }
        throw error;
      }
      
      return convertReservationData(data);
    } catch (error) {
      console.error("‚ùå [RESERVATION] Erreur r√©cup√©ration par ID:", error);
      return null;
    }
  },

  /**
   * V√©rifier si l'utilisateur a d√©j√† r√©serv√© une annonce
   */
  hasExistingReservation: async (userId: string, annonceId: string): Promise<boolean> => {
    try {
      console.log(`üîç [RESERVATION] V√©rification r√©servation existante: ${userId} -> ${annonceId}`);
      
      if (!userId || !annonceId) {
        return false;
      }
      
      const { data, error } = await supabase
        .from('reservations')
        .select('*')
        .eq('benevole_id', userId)
        .eq('annonce_id', annonceId);
      
      if (error) {
        throw error;
      }
      
      // V√©rifier s'il y a une r√©servation active
      const hasActiveReservation = data?.some(item => {
        return item.statut === ReservationStatut.EnAttente || 
               item.statut === ReservationStatut.Confirmee;
      }) || false;
      
      console.log(`üîç [RESERVATION] R√©servation existante: ${hasActiveReservation}`);
      return hasActiveReservation;
      
    } catch (error) {
      console.error("‚ùå [RESERVATION] Erreur v√©rification:", error);
      return false;
    }
  },

  /**
   * Mettre √† jour le statut d'une r√©servation
   */
  updateReservationStatus: async (id: string, statut: ReservationStatut, commentaire?: string): Promise<void> => {
    try {
      const updateData: any = { 
        statut,
        updated_at: new Date().toISOString()
      };
      
      if (commentaire) {
        updateData.commentaire_association = commentaire;
      }
      
      const { error } = await supabase
        .from('reservations')
        .update(updateData)
        .eq('id', id);
      
      if (error) {
        throw error;
      }
      
      console.log('‚úÖ [RESERVATION] Statut mis √† jour:', id, statut);
    } catch (error) {
      console.error("‚ùå [RESERVATION] Erreur mise √† jour statut:", error);
      throw new Error(`Impossible de mettre √† jour le statut: ${error}`);
    }
  },

  /**
   * Supprimer une r√©servation
   */
  deleteReservation: async (id: string): Promise<void> => {
    try {
      const { error } = await supabase
        .from('reservations')
        .delete()
        .eq('id', id);
      
      if (error) {
        throw error;
      }
      
      console.log('‚úÖ [RESERVATION] Supprim√©e:', id);
    } catch (error) {
      console.error("‚ùå [RESERVATION] Erreur suppression:", error);
      throw new Error(`Impossible de supprimer la r√©servation: ${error}`);
    }
  },

  /**
   * R√©cup√©rer les r√©servations pour les annonces d'une association
   */
  getReservationsForAssociation: async (associationUserId: string): Promise<Reservation[]> => {
    try {
      // D'abord r√©cup√©rer les annonces de l'association
      const annonces = await annonceSupabaseService.getAnnoncesByUser(associationUserId);
      const annonceIds = annonces.map(a => a.id).filter(id => id) as string[];
      
      if (annonceIds.length === 0) {
        return [];
      }
      
      // Puis r√©cup√©rer les r√©servations pour ces annonces
      const { data, error } = await supabase
        .from('reservations')
        .select('*')
        .in('annonce_id', annonceIds)
        .order('created_at', { ascending: false });
      
      if (error) {
        throw error;
      }
      
      return data ? data.map(convertReservationData) : [];
    } catch (error) {
      console.error("‚ùå [RESERVATION] Erreur r√©cup√©ration pour association:", error);
      return [];
    }
  },

  /**
   * Compter les r√©servations par statut pour un utilisateur
   */
  getReservationStats: async (userId: string): Promise<Record<ReservationStatut, number>> => {
    try {
      const { data, error } = await supabase
        .from('reservations')
        .select('statut')
        .eq('benevole_id', userId);
      
      if (error) {
        throw error;
      }
      
      const stats: Record<ReservationStatut, number> = {
        [ReservationStatut.EnAttente]: 0,
        [ReservationStatut.Confirmee]: 0,
        [ReservationStatut.Annulee]: 0,
        [ReservationStatut.Refusee]: 0,
        [ReservationStatut.Terminee]: 0
      };
      
      if (data) {
        data.forEach(item => {
          if (item.statut in stats) {
            stats[item.statut as ReservationStatut]++;
          }
        });
      }
      
      return stats;
    } catch (error) {
      console.error("‚ùå [RESERVATION] Erreur r√©cup√©ration statistiques:", error);
      return {
        [ReservationStatut.EnAttente]: 0,
        [ReservationStatut.Confirmee]: 0,
        [ReservationStatut.Annulee]: 0,
        [ReservationStatut.Refusee]: 0,
        [ReservationStatut.Terminee]: 0
      };
    }
  }
}; 